{"version":3,"sources":["../src/graphql-resolver.js"],"names":["GraphQLResolver","Reflect","defineMetadata","Object","getOwnPropertyNames","getPrototypeOf","filter","propertyName","getMetadata","reduce","schma","type","bind","create","assertClass","Resolver","errorMessage","Error","assertHasMetaData","key","obj","mergeOperation","obj1","obj2","mergedObj","merge","objs","length","createResolvers","resolvers","map","resolver","Resolvers","Query","target","Subscription","Mutation"],"mappings":"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","file":"graphql-resolver.js","sourcesContent":["import \"reflect-metadata\";\n\nimport {\n  OperationType,\n  ResolverType,\n  QueryOperation,\n  SubscriptionOperation,\n  MutationOperation,\n  PropertyNameMap} from './enums'\n\nexport class GraphQLResolver {\n\n  constructor() {\n    Reflect.defineMetadata(ResolverType, true, this)\n  }\n\n  get Resolvers() {\n    return Object.getOwnPropertyNames(Object.getPrototypeOf(this))\n      .filter((propertyName) => propertyName !== \"constructor\" && Reflect.getMetadata(OperationType, this, propertyName))\n      .reduce((schma, propertyName) => {\n        const type = Reflect.getMetadata(OperationType, this, propertyName)\n        return { ...schma,\n          [PropertyNameMap[type]]: { ...schma[PropertyNameMap[type]],\n            [propertyName]: this[propertyName].bind(this)\n          }\n        }\n      }, Object.create(null))\n  }\n}\n\nconst assertClass = (Resolver, errorMessage) => {\n  if (typeof Resolver !== 'function') {\n    throw new Error(errorMessage)\n  }\n}\nconst assertHasMetaData = (key, obj, errorMessage) => {\n  if (!Reflect.getMetadata(ResolverType, obj))\n    throw new Error(errorMessage)\n}\n\nexport const mergeOperation = (obj1, obj2) => {\n  const mergedObj = {\n    [PropertyNameMap[QueryOperation]]: { ...(obj1[PropertyNameMap[QueryOperation]] || {}),\n      ...(obj2[PropertyNameMap[QueryOperation]] || {})\n    },\n    [PropertyNameMap[MutationOperation]]: { ...(obj1[PropertyNameMap[MutationOperation]] || {}),\n      ...(obj2[PropertyNameMap[MutationOperation]] || {})\n    },\n    [PropertyNameMap[SubscriptionOperation]]: { ...(obj1[PropertyNameMap[SubscriptionOperation]] || {}),\n      ...(obj2[PropertyNameMap[SubscriptionOperation]] || {})\n    },\n  }\n  return mergedObj\n}\n\nconst merge = (obj, ...objs) => {\n  if (obj === void 0) return Object.create(null)\n  else if (objs.length === 0) return obj\n  else return mergeOperation(obj, merge(...objs))\n}\n\nexport const createResolvers = (...resolvers) => {\n  return merge(\n    ...resolvers.map(Resolver => {\n      assertClass(Resolver, '`createResolvers` accepts only a class')\n      const resolver = new Resolver()\n      assertHasMetaData(ResolverType, resolver, '`createResolvers` can accept only instance of GraphQLResolver')\n      return resolver.Resolvers\n    })\n  )\n}\n\nexport const Query = (target, key) => {\n  Reflect.defineMetadata(OperationType, QueryOperation, target, key)\n}\n\nexport const Subscription = (target, key) => {\n  Reflect.defineMetadata(OperationType, SubscriptionOperation, target, key)\n}\n\nexport const Mutation = (target, key) => {\n  Reflect.defineMetadata(OperationType, MutationOperation, target, key)\n}"]}